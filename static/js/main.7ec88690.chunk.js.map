{"version":3,"sources":["Components/MemoryBox.js","Components/GameScore.js","Components/GameScreen.js","App.js","index.js"],"names":["MemoryBox","props","className","onClick","buttonAction","characterName","height","width","alt","src","characterImage","GameScore","curScore","bstScore","GameScreen","useState","imageList","setImageList","isLoading","setIsLoading","pastItemClicked","setPastItemClicked","currentScore","setCurrentScore","bestScore","setBestScore","characterList","useEffect","a","forEach","item","fetchData","response","tmpVar","name","images","Object","keys","length","character_name","fetch","json","checkMemory","itemClicked","indexOf","temp","push","splice","alert","rearrangeImages","keyArray","fetchKeyArray","shuffleArray","i","tmpArray","map","randomVal","Math","floor","random","type","color","style","textAlign","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ec88690.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MemoryBox = (props) => { // Component to display a characters on the game screen.\n\n    return (\n        <div key = {props.characterName} className = \"memory-box\" onClick = {() => props.buttonAction(props.characterName)}>\n            <div className = \"memory-box-image\"><img height = \"320\" width = \"300\" alt = {props.characterName} src = {props.characterImage} /></div>\n            <div className = \"memory-box-title\"><h3>{props.characterName}</h3></div>\n        </div>\n    )\n};\n\nexport {MemoryBox};","import React from \"react\";\n\nconst GameScore = (props) => {  // Component to display the scores.\n    return (\n        <div className = \"GameScore\">\n            <h4>Current Score : {props.curScore}</h4>\n            <h4>Best Score : {props.bstScore}</h4>\n        </div>\n    )\n}\n\nexport {GameScore}","import React, { useState, useEffect } from 'react';\nimport Loader from 'react-loader-spinner';\nimport { MemoryBox } from './MemoryBox';\nimport { GameScore } from './GameScore';\n\nconst GameScreen = () => {\n\n\n    const [imageList, setImageList] = useState({}); // State to hold all the character names and images. \n    const [isLoading, setIsLoading] = useState(true); // State to check if fetch is complete or not.\n\n    const [pastItemClicked, setPastItemClicked] = useState([]); // State to keep track of images already clicked.\n    const [currentScore, setCurrentScore] = useState(0)         // State to keep track of current score.\n    const [bestScore, setBestScore] = useState(0)               // State to keep track of best score.\n  \n    let characterList = [\n      \"Denki_Kaminari\",\n      \"Izuku_Midoriya\",\n      \"Ochaco_Uraraka\",\n      \"Eijiro_Kirishima\",\n      \"Shoto_Todoroki\",\n      \"Fumikage_Tokoyami\",\n      \"Katsuki_Bakugo\",\n      \"Toru_Hagakure\",\n      \"Nejire_Hado\",\n      \"Mina_Ashido\",\n      \"Minoru_Mineta\",\n      \"Tsuyu_Asui\"\n    ]\n  \n    useEffect(() => {\n  \n      (async () => {\n  \n        await characterList.forEach(async function(item){\n          let response =  await fetchData(item);\n          let tmpVar = imageList;\n          tmpVar[response.name] = response.images[1]; // Data is added to the imageList state as a key-value pair,\n          setImageList(tmpVar);                       // with key being the character name, and value being the character iamge.\n          if(Object.keys(imageList).length ===  12) setIsLoading(false)\n        });\n  \n      })()\n\n    },[])\n  \n    const fetchData = async(character_name) => {  // Fetch data for every character.\n      let response = await fetch(`https://myheroacademiaapi.com/api/character/${character_name}`);\n      response = await response.json();\n      return response;\n    }\n\n    const checkMemory = (itemClicked) => {    // Function for handling the game.\n      if(pastItemClicked.indexOf(itemClicked) === -1){    // If Image has not been clicked,\n        let temp = pastItemClicked; temp.push(itemClicked); setPastItemClicked(temp); // We add image to list of past clicked images.\n        setCurrentScore(currentScore + 1);                            // We increase current score.\n        if(pastItemClicked.length === 12) pastItemClicked.splice(0,1) // If 12 items have been clicked, the first clicked item is removed.\n      } else {    // If Image has already been clicked, game is over.\n        alert(\"Oops ! You clicked on an already clicked item. Final Score is \"+currentScore+\" :)\");\n        if(currentScore > bestScore) setBestScore(currentScore);  // Update Best Score.\n        setPastItemClicked([]);   // Clear the list of past items.\n        setCurrentScore(0);       // Reset current score as 0.\n      }         \n      rearrangeImages();        // Rearrange images after every click.\n    }\n\n    const rearrangeImages = () => {   // Function to rearrange images on the Game Screen.\n        let tmpVar = {};\n        let keyArray = fetchKeyArray(); // First we fetch the list of keys available.\n        keyArray = shuffleArray(keyArray);  // Second, we shuffle the list of keys.\n        // Lastly, we fetch the values of all the keys from the imageList state and store it in a new object.\n        for(let i = 0; i < keyArray.length; i++) tmpVar[keyArray[i]] = imageList[keyArray[i]]\n        setImageList(tmpVar)\n    }\n\n    const fetchKeyArray = () => { // Function to fetch list of keys in object.\n        let tmpArray = [];\n        Object.keys(imageList).map(item => tmpArray.push(item))\n        return tmpArray;\n    }\n\n    const shuffleArray = (tmpArray) => {  // Function to shuffle/randomize elements in the provided array.\n        for(let i = 0 ; i < tmpArray.length; i++){\n            var randomVal = Math.floor(Math.random() * tmpArray.length);\n            [tmpArray[i],tmpArray[randomVal]] = [tmpArray[randomVal], tmpArray[i]]\n        }\n        return tmpArray;\n    }\n\n    return (\n        <div>\n            {isLoading // If Fetch has not been complete, a Loading animation will be displayed.\n                ? (<div className = \"loaderDiv\"><Loader type=\"TailSpin\" color=\"#00BFFF\" height={120} width={120}/></div>)\n                : ( \n                    <div className = \"gamescreen\">\n                        <h1 style = {{textAlign:\"center\"}}>My Hero Academia - Memory Game</h1>\n                        <h4 style = {{textAlign:\"center\"}}>Score points by clicking on a new image every click. If you click the same image, it's Game Over</h4>\n                        <GameScore curScore = {currentScore} bstScore = {bestScore} />\n                        {Object.keys(imageList).map(function(item){\n                            return <MemoryBox key = {item} characterName = {item} characterImage = {imageList[item]} buttonAction = {checkMemory}  />\n                        })}\n                    </div>\n            )}\n        </div>\n    )\n}\n\nexport {GameScreen}","import './App.css';\nimport { GameScreen } from './Components/GameScreen';\n\nfunction App() {\n  \n  return (\n      <div className=\"App\">\n        <GameScreen />\n      </div>\n  );\n\n}\n\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}